{"version":3,"file":"static/js/131.1e73e4cd.chunk.js","mappings":"yQAoIA,UA3GwB,WACtB,IAAMA,GAAWC,EAAAA,EAAAA,MACTC,GAAWC,EAAAA,EAAAA,MAAXD,OACFE,EAAc,IAAIC,gBAAgBH,GAAQI,IAAI,YAC9CC,EAAWH,GAA4B,IAE7C,GAAwBI,EAAAA,EAAAA,UAAS,IAAG,eAA7BC,EAAI,KAAEC,EAAO,KACpB,GAA0BF,EAAAA,EAAAA,UAAS,IAAG,eAA/BG,EAAK,KAAEC,EAAQ,KACtB,GAAgCJ,EAAAA,EAAAA,UAAS,IAAG,eAArCK,EAAQ,KAAEC,EAAW,KAC5B,GAA8CN,EAAAA,EAAAA,UAAS,IAAG,eAAnDO,EAAe,KAAEC,EAAkB,KAE1C,GAAyCC,EAAAA,EAAAA,YAAWC,EAAAA,GAA5CC,EAAK,EAALA,MAAiBC,EAAW,EAArBC,SACPC,EAAaH,EAAbG,SAEFC,EAAY,yCAAG,WAAOC,GAAiB,gFAMxB,GALbC,EAAU,CACd,eAAgB,mBAChB,cAAiB,iBAGnBD,EAAEE,iBAECb,IAAaE,EAAe,gBACc,OAA3CY,EAAAA,GAAAA,MAAY,+BAA+B,mDAKdC,EAAAA,EAAAA,KAAW,yCACtC,CACEnB,KAAAA,EACAE,MAAAA,EACAE,SAAAA,GAEF,CAAEY,QAASA,IACX,KAAD,WAPOI,EAAI,EAAJA,KASRT,EAAY,CAAEU,KAAM,cAAeC,QAASF,IAC5CG,aAAaC,QAAQ,WAAYC,KAAKC,UAAUN,IAEhD7B,EAASO,GAAY,KAAK,kDAE1BoB,EAAAA,GAAAA,OAAYS,EAAAA,EAAAA,GAAS,EAAD,KAAO,0DAE9B,gBA9BiB,sCAsClB,OANAC,EAAAA,EAAAA,YAAU,WACLf,GACDtB,EAASO,EAEb,GAAE,CAACP,EAAUO,EAAUe,KAGrB,UAAC,IAAe,YACd,SAAC,KAAM,WACL,2BAAO,iBAET,eAAIgB,UAAU,OAAM,SAAC,eAGrB,UAAC,IAAI,CAACC,SAAUhB,EAAa,WAC3B,UAAC,UAAU,CAACe,UAAU,OAAOE,UAAU,OAAM,WAC3C,SAAC,UAAU,UAAC,UACZ,SAAC,YAAY,CACXV,KAAK,OACLW,UAAQ,EACRC,SAAU,SAAClB,GAAC,OAAKd,EAAQc,EAAEmB,OAAOC,MAAM,QAG5C,UAAC,UAAU,CAACN,UAAU,OAAOE,UAAU,QAAO,WAC5C,SAAC,UAAU,UAAC,WACZ,SAAC,YAAY,CACXV,KAAK,QACLW,UAAQ,EACRC,SAAU,SAAClB,GAAC,OAAKZ,EAASY,EAAEmB,OAAOC,MAAM,QAG7C,UAAC,UAAU,CAACN,UAAU,OAAOE,UAAU,WAAU,WAC/C,SAAC,UAAU,UAAC,WACZ,SAAC,YAAY,CACXV,KAAK,WACLW,UAAQ,EACRC,SAAU,SAAClB,GAAC,OAAKV,EAAYU,EAAEmB,OAAOC,MAAM,QAGhD,UAAC,UAAU,CAACN,UAAU,OAAOE,UAAU,kBAAiB,WACtD,SAAC,UAAU,UAAC,qBACZ,SAAC,YAAY,CACXV,KAAK,WACLW,UAAQ,EACRC,SAAU,SAAClB,GAAC,OAAKR,EAAmBQ,EAAEmB,OAAOC,MAAM,QAGvD,gBAAKN,UAAU,OAAM,UACnB,SAAC,IAAM,CAACR,KAAK,SAAQ,SAAC,iBAExB,iBAAKQ,UAAU,OAAM,UAAC,8BACE,KACtB,SAAC,EAAAO,KAAI,CAACC,GAAE,0BAAqBvC,GAAW,SAAC,uBAOnD,C,sEChIawC,E,QAAYC,GAAAA,IAAU,4C","sources":["screens/SignupScreen/index.tsx","styles/SignIn.ts"],"sourcesContent":["import React, \r\n{ \r\n  SyntheticEvent, \r\n  useContext, \r\n  useEffect, \r\n  useState \r\n} from 'react'\r\n\r\nimport axios from 'axios';\r\n\r\nimport { useLocation, useNavigate } from 'react-router-dom'\r\nimport { Helmet } from 'react-helmet-async'\r\n\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { \r\n  Container as ContainerScreen\r\n} from '../../styles/SignIn';\r\n\r\nimport { Store } from '../../context/Store';\r\n\r\nimport { toast } from 'react-toastify';\r\nimport { getError } from '../../util/utils';\r\n\r\nconst SignUp:React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const { search } = useLocation();\r\n  const redirectUrl = new URLSearchParams(search).get('redirect');\r\n  const redirect = redirectUrl ? redirectUrl : '/';\r\n  \r\n  const [name, setName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  \r\n  const { state, dispatch: ctxDispatch } = useContext(Store);\r\n  const { userInfo } = state;\r\n\r\n  const handleSubmit = async (e: SyntheticEvent) => {\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': 'bearer secret'\r\n    }\r\n\r\n    e.preventDefault();\r\n\r\n    if(password !== confirmPassword) {\r\n      toast.error(\"As senhas nao se conhecidem\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const { data }: any = await  axios.post('http://localhost:3001/api/users/signup', \r\n        {\r\n          name,\r\n          email,\r\n          password\r\n        },\r\n        { headers: headers }\r\n      );\r\n\r\n      ctxDispatch({ type: 'USER_SIGNIN', payload: data });\r\n      localStorage.setItem('userInfo', JSON.stringify(data));\r\n      \r\n      navigate(redirect || '/');\r\n    } catch (err) {\r\n      toast.error(getError(err));\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(userInfo) {\r\n      navigate(redirect);\r\n    }\r\n  },[navigate, redirect, userInfo]);\r\n\r\n  return (\r\n    <ContainerScreen>\r\n      <Helmet>\r\n        <title>Registrar</title>\r\n      </Helmet>\r\n      <h1 className='my-3'>\r\n        Registrar\r\n      </h1>\r\n      <Form onSubmit={handleSubmit}>\r\n        <Form.Group className=\"mb-3\" controlId='name'>\r\n          <Form.Label>Nome</Form.Label>\r\n          <Form.Control \r\n            type=\"name\" \r\n            required \r\n            onChange={(e) => setName(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n        <Form.Group className=\"mb-3\" controlId='email'>\r\n          <Form.Label>Email</Form.Label>\r\n          <Form.Control \r\n            type=\"email\" \r\n            required \r\n            onChange={(e) => setEmail(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n        <Form.Group className=\"mb-3\" controlId='password'>\r\n          <Form.Label>Senha</Form.Label>\r\n          <Form.Control \r\n            type=\"password\" \r\n            required\r\n            onChange={(e) => setPassword(e.target.value)} \r\n          />\r\n        </Form.Group>\r\n        <Form.Group className=\"mb-3\" controlId='confirmPassword'>\r\n          <Form.Label>Confirmar Senha</Form.Label>\r\n          <Form.Control \r\n            type=\"password\" \r\n            required\r\n            onChange={(e) => setConfirmPassword(e.target.value)} \r\n          />\r\n        </Form.Group>\r\n        <div className='mb-3'>\r\n          <Button type='submit'>Registrar</Button>\r\n        </div>\r\n        <div className='mb-3'>\r\n          Você já tem uma conta{' '}\r\n          <Link to={`/signin?redirect${redirect}`}>\r\n            Logue aqui\r\n          </Link>\r\n        </div>\r\n      </Form>\r\n    </ContainerScreen>\r\n  )\r\n}\r\n\r\nexport default SignUp;","import styled from \"styled-components\"\r\n\r\nexport const Container = styled.div`\r\n  max-width: 600px;\r\n`;"],"names":["navigate","useNavigate","search","useLocation","redirectUrl","URLSearchParams","get","redirect","useState","name","setName","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","useContext","Store","state","ctxDispatch","dispatch","userInfo","handleSubmit","e","headers","preventDefault","toast","axios","data","type","payload","localStorage","setItem","JSON","stringify","getError","useEffect","className","onSubmit","controlId","required","onChange","target","value","Link","to","Container","styled"],"sourceRoot":""}