{"version":3,"file":"static/js/407.60e21ff7.chunk.js","mappings":"qPASMA,EAAU,SAACC,EAAYC,GAC3B,OAAOA,EAAOC,MACZ,IAAK,gBACH,OAAO,kBACFF,GAAK,IACRG,SAAS,IAEb,IAAK,gBACH,OAAO,kBACFH,GAAK,IACRG,SAAS,EAAOC,OAAQH,EAAOI,UAEnC,IAAK,aACH,OAAO,kBACFL,GAAK,IACRG,SAAS,EAAOG,MAAOL,EAAOI,UAElC,QACE,OAAOL,EAGb,EAuFA,UArF8B,WAC5B,IAAMO,GAAWC,EAAAA,EAAAA,MAETC,GADUC,EAAAA,EAAAA,YAAWC,EAAAA,GAArBX,MACAS,SAER,GAA+CG,EAAAA,EAAAA,YAAWb,EAAU,CAClEI,SAAS,EACTG,MAAO,KACP,sBAHOH,EAAO,EAAPA,QAASG,EAAK,EAALA,MAAOF,EAAM,EAANA,OAAUS,EAAQ,KAsB3C,OAjBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,yCAAG,2FACoB,OAApCF,EAAS,CAAEX,KAAM,kBAAmB,kBAENc,EAAAA,EAAAA,IAAU,wCAAyC,CAC7EC,QAAS,CAAEC,cAAc,UAAD,OAAYT,EAASU,UAC5C,KAAD,WAFMC,EAAI,EAAJA,KAIRP,EAAS,CAAEX,KAAM,gBAAiBG,QAASe,IAAQ,gDAEnDP,EAAS,CAAEX,KAAM,aAAcG,SAASgB,EAAAA,EAAAA,GAAS,EAAD,MAAS,yDAE5D,kBAXc,mCAYfN,GACF,GAAE,CAACN,KAID,4BACE,SAAC,KAAM,WACL,2BAAO,+BAET,wBAAI,4BACHN,GACC,SAAC,KAAU,IACTG,GACF,SAAC,KAAU,CAACgB,QAAQ,SAAQ,SACxBhB,KAGJ,mBAAOiB,UAAU,QAAO,WACtB,4BACE,2BACE,wBAAI,QACJ,wBAAI,UACJ,wBAAI,WACJ,wBAAI,eACJ,wBAAI,aACJ,wBAAI,kBAGR,2BACCnB,EAAOoB,KAAI,SAACC,GAAU,OACrB,2BACE,wBAAKA,EAAMC,OACX,wBAAKD,EAAME,UAAUC,UAAU,EAAG,OAClC,wBAAKH,EAAMI,WAAWC,QAAQ,MAC9B,wBAAKL,EAAMM,OAA0C,MAAQ,YAC7D,wBACGN,EAAMO,YACLP,EAAMQ,YAAYL,UAAU,EAAE,IAE9B,QAGJ,yBACE,SAAC,IAAM,CACL1B,KAAK,SACLoB,QAAQ,QACRY,QAAS,WACP3B,EAAS,UAAD,OAAWkB,EAAMC,KAC3B,EAAE,SACH,iBAnBID,EAAMC,IAuBV,WAOjB,C","sources":["screens/OrderHistory/index.tsx"],"sourcesContent":["import axios from 'axios'\r\nimport React, { useContext, useEffect, useReducer } from 'react'\r\nimport { Button } from 'react-bootstrap'\r\nimport { Helmet } from 'react-helmet-async'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { LoadingBox, MessageBox } from '../../components'\r\nimport { Store } from '../../context/Store'\r\nimport { getError } from '../../util/utils'\r\n\r\nconst reducer = (state: any, action: any) => {\r\n  switch(action.type) {\r\n    case 'FETCH_REQUEST':\r\n      return {\r\n        ...state,\r\n        loading: true\r\n      }\r\n    case 'FETCH_SUCCESS':\r\n      return  {\r\n        ...state,\r\n        loading: false, orders: action.payload\r\n      }\r\n    case 'FETCH_FAIL':\r\n      return  {\r\n        ...state,\r\n        loading: false, error: action.payload\r\n      }\r\n    default:\r\n      return state\r\n      \r\n  }\r\n}\r\n\r\nconst OrderHistory:React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const { state } = useContext(Store);\r\n  const { userInfo } = state;\r\n\r\n  const [{ loading, error, orders }, dispatch] = useReducer(reducer , {\r\n    loading: true,\r\n    error: ''\r\n  });\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      dispatch({ type: 'FETCH_REQUEST' });\r\n      try {\r\n        const { data }: any = await axios.get(`http://localhost:3001/api/orders/mine`, {\r\n          headers: { authorization: `Bearer ${userInfo.token}` }\r\n        });\r\n        \r\n        dispatch({ type: 'FETCH_SUCCESS', payload: data });\r\n      } catch (err) {\r\n        dispatch({ type: 'FETCH_FAIL', payload: getError(err) });\r\n      }\r\n    }\r\n    fetchData();\r\n  },[userInfo])\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Helmet>\r\n        <title>Histórico de pedidos</title>\r\n      </Helmet>\r\n      <h1>Histórico de pedidos</h1>\r\n      {loading ? (\r\n        <LoadingBox />\r\n      ) : error ? (\r\n        <MessageBox variant='danger'>\r\n          { error }\r\n        </MessageBox>\r\n      ) : (\r\n        <table className='table'>\r\n          <thead>\r\n            <tr>\r\n              <th>ID</th>\r\n              <th>DATA</th>\r\n              <th>TOTAL</th>\r\n              <th>PAGAMENTO</th>\r\n              <th>ENTREGA</th>\r\n              <th>ACTIONS</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n          {orders.map((order: any) => (\r\n            <tr key={order._id}>\r\n              <td>{order._id}</td>\r\n              <td>{order.createdAt.substring(0, 10)}</td>\r\n              <td>{order.totalPrice.toFixed(2)}</td>\r\n              <td>{order.isPaid ? /*order.paidAt.substring(0,10)*/ 'Sim' : 'Não'}</td>\r\n              <td>\r\n                {order.isDelivered ? (\r\n                  order.deliveredAt.substring(0,10)\r\n                ) : (\r\n                  'No'\r\n                )}\r\n              </td>\r\n              <td>\r\n                <Button\r\n                  type=\"button\"\r\n                  variant='light'\r\n                  onClick={() => {\r\n                    navigate(`/order/${order._id}`)\r\n                  }}\r\n                >\r\n                  Detalhes\r\n                </Button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n          </tbody>\r\n        </table>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default OrderHistory"],"names":["reducer","state","action","type","loading","orders","payload","error","navigate","useNavigate","userInfo","useContext","Store","useReducer","dispatch","useEffect","fetchData","axios","headers","authorization","token","data","getError","variant","className","map","order","_id","createdAt","substring","totalPrice","toFixed","isPaid","isDelivered","deliveredAt","onClick"],"sourceRoot":""}